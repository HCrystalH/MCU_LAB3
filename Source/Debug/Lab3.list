
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002768  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080029b0  080029b0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b0  080029b0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080029b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000020  080029d8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080029d8  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009526  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcc  00000000  00000000  0002956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002bbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c04  00000000  00000000  0002c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b620  00000000  00000000  0004316c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082623  00000000  00000000  0004e78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0daf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  000d0e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	0800285c 	.word	0x0800285c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	0800285c 	.word	0x0800285c

0800014c <display7SEG>:

#include "7SEG.h"
#include "main.h"

int led_buffer[4] = {0,0,0,0};
void display7SEG(int number){
 800014c:	b580      	push	{r7, lr}
 800014e:	b0c8      	sub	sp, #288	; 0x120
 8000150:	af00      	add	r7, sp, #0
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	6018      	str	r0, [r3, #0]
	int a[10][7] = {
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	4a42      	ldr	r2, [pc, #264]	; (8000264 <display7SEG+0x118>)
 800015c:	4618      	mov	r0, r3
 800015e:	4611      	mov	r1, r2
 8000160:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000164:	461a      	mov	r2, r3
 8000166:	f002 fb63 	bl	8002830 <memcpy>
		{0, 1, 0, 0, 0, 0, 0}, 	//6
		{0, 0, 0, 1, 1, 1, 1},	//7
		{0, 0, 0, 0, 0, 0, 0}, 	//8
		{0, 0, 0, 0, 1, 0, 0}   //9
	};
	HAL_GPIO_WritePin(GPIOB, seg_a_Pin, a[number][0]);
 800016a:	f107 0108 	add.w	r1, r7, #8
 800016e:	1d3b      	adds	r3, r7, #4
 8000170:	681a      	ldr	r2, [r3, #0]
 8000172:	4613      	mov	r3, r2
 8000174:	00db      	lsls	r3, r3, #3
 8000176:	1a9b      	subs	r3, r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	440b      	add	r3, r1
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	b2db      	uxtb	r3, r3
 8000180:	461a      	mov	r2, r3
 8000182:	2108      	movs	r1, #8
 8000184:	4838      	ldr	r0, [pc, #224]	; (8000268 <display7SEG+0x11c>)
 8000186:	f001 fb3a 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_b_Pin, a[number][1]);
 800018a:	f107 0108 	add.w	r1, r7, #8
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	4613      	mov	r3, r2
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	1a9b      	subs	r3, r3, r2
 8000198:	009b      	lsls	r3, r3, #2
 800019a:	440b      	add	r3, r1
 800019c:	3304      	adds	r3, #4
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2110      	movs	r1, #16
 80001a6:	4830      	ldr	r0, [pc, #192]	; (8000268 <display7SEG+0x11c>)
 80001a8:	f001 fb29 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_c_Pin, a[number][2]);
 80001ac:	f107 0108 	add.w	r1, r7, #8
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4613      	mov	r3, r2
 80001b6:	00db      	lsls	r3, r3, #3
 80001b8:	1a9b      	subs	r3, r3, r2
 80001ba:	009b      	lsls	r3, r3, #2
 80001bc:	440b      	add	r3, r1
 80001be:	3308      	adds	r3, #8
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	2120      	movs	r1, #32
 80001c8:	4827      	ldr	r0, [pc, #156]	; (8000268 <display7SEG+0x11c>)
 80001ca:	f001 fb18 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_d_Pin, a[number][3]);
 80001ce:	f107 0108 	add.w	r1, r7, #8
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	4613      	mov	r3, r2
 80001d8:	00db      	lsls	r3, r3, #3
 80001da:	1a9b      	subs	r3, r3, r2
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	440b      	add	r3, r1
 80001e0:	330c      	adds	r3, #12
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	2140      	movs	r1, #64	; 0x40
 80001ea:	481f      	ldr	r0, [pc, #124]	; (8000268 <display7SEG+0x11c>)
 80001ec:	f001 fb07 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_e_Pin, a[number][4]);
 80001f0:	f107 0108 	add.w	r1, r7, #8
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	4613      	mov	r3, r2
 80001fa:	00db      	lsls	r3, r3, #3
 80001fc:	1a9b      	subs	r3, r3, r2
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	440b      	add	r3, r1
 8000202:	3310      	adds	r3, #16
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	2180      	movs	r1, #128	; 0x80
 800020c:	4816      	ldr	r0, [pc, #88]	; (8000268 <display7SEG+0x11c>)
 800020e:	f001 faf6 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_f_Pin, a[number][5]);
 8000212:	f107 0108 	add.w	r1, r7, #8
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4613      	mov	r3, r2
 800021c:	00db      	lsls	r3, r3, #3
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	009b      	lsls	r3, r3, #2
 8000222:	440b      	add	r3, r1
 8000224:	3314      	adds	r3, #20
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <display7SEG+0x11c>)
 8000232:	f001 fae4 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, seg_g_Pin, a[number][6]);
 8000236:	f107 0108 	add.w	r1, r7, #8
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4613      	mov	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	1a9b      	subs	r3, r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	440b      	add	r3, r1
 8000248:	3318      	adds	r3, #24
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <display7SEG+0x11c>)
 8000256:	f001 fad2 	bl	80017fe <HAL_GPIO_WritePin>

}
 800025a:	bf00      	nop
 800025c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	08002874 	.word	0x08002874
 8000268:	40010c00 	.word	0x40010c00

0800026c <update_display>:

void update_display(int* display_flag){
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	switch (*display_flag){
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b03      	cmp	r3, #3
 800027a:	f200 8095 	bhi.w	80003a8 <update_display+0x13c>
 800027e:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <update_display+0x18>)
 8000280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000284:	08000295 	.word	0x08000295
 8000288:	080002db 	.word	0x080002db
 800028c:	08000321 	.word	0x08000321
 8000290:	08000367 	.word	0x08000367
		case 0:{
			(*display_flag)++;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002a4:	4843      	ldr	r0, [pc, #268]	; (80003b4 <update_display+0x148>)
 80002a6:	f001 faaa 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER2_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4840      	ldr	r0, [pc, #256]	; (80003b4 <update_display+0x148>)
 80002b2:	f001 faa4 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI1_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002bc:	483d      	ldr	r0, [pc, #244]	; (80003b4 <update_display+0x148>)
 80002be:	f001 fa9e 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI2_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c8:	483a      	ldr	r0, [pc, #232]	; (80003b4 <update_display+0x148>)
 80002ca:	f001 fa98 	bl	80017fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80002ce:	4b3a      	ldr	r3, [pc, #232]	; (80003b8 <update_display+0x14c>)
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3a 	bl	800014c <display7SEG>
			break;
 80002d8:	e067      	b.n	80003aa <update_display+0x13e>
		}
		case 1:{
			(*display_flag)++;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	1c5a      	adds	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ea:	4832      	ldr	r0, [pc, #200]	; (80003b4 <update_display+0x148>)
 80002ec:	f001 fa87 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER2_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f6:	482f      	ldr	r0, [pc, #188]	; (80003b4 <update_display+0x148>)
 80002f8:	f001 fa81 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI1_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000302:	482c      	ldr	r0, [pc, #176]	; (80003b4 <update_display+0x148>)
 8000304:	f001 fa7b 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI2_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030e:	4829      	ldr	r0, [pc, #164]	; (80003b4 <update_display+0x148>)
 8000310:	f001 fa75 	bl	80017fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000314:	4b28      	ldr	r3, [pc, #160]	; (80003b8 <update_display+0x14c>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff17 	bl	800014c <display7SEG>
			break;
 800031e:	e044      	b.n	80003aa <update_display+0x13e>
		}
		case 2:{
			(*display_flag)++;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000330:	4820      	ldr	r0, [pc, #128]	; (80003b4 <update_display+0x148>)
 8000332:	f001 fa64 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER2_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	481d      	ldr	r0, [pc, #116]	; (80003b4 <update_display+0x148>)
 800033e:	f001 fa5e 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI1_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <update_display+0x148>)
 800034a:	f001 fa58 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI2_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <update_display+0x148>)
 8000356:	f001 fa52 	bl	80017fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <update_display+0x14c>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff fef4 	bl	800014c <display7SEG>
			break;
 8000364:	e021      	b.n	80003aa <update_display+0x13e>
		}
		case 3:{
			(*display_flag) = 0;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000372:	4810      	ldr	r0, [pc, #64]	; (80003b4 <update_display+0x148>)
 8000374:	f001 fa43 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER2_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <update_display+0x148>)
 8000380:	f001 fa3d 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI1_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <update_display+0x148>)
 800038c:	f001 fa37 	bl	80017fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI2_Pin, GPIO_PIN_SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <update_display+0x148>)
 8000398:	f001 fa31 	bl	80017fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <update_display+0x14c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff fed3 	bl	800014c <display7SEG>
			break;
 80003a6:	e000      	b.n	80003aa <update_display+0x13e>
		}
		default:{
			break;
 80003a8:	bf00      	nop
		}
	}
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	2000003c 	.word	0x2000003c

080003bc <Init7SEG>:

void Init7SEG(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	480e      	ldr	r0, [pc, #56]	; (8000400 <Init7SEG+0x44>)
 80003c8:	f001 fa19 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER2_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	480b      	ldr	r0, [pc, #44]	; (8000400 <Init7SEG+0x44>)
 80003d4:	f001 fa13 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI1_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4808      	ldr	r0, [pc, #32]	; (8000400 <Init7SEG+0x44>)
 80003e0:	f001 fa0d 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, EN_7SEG_HORI2_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <Init7SEG+0x44>)
 80003ec:	f001 fa07 	bl	80017fe <HAL_GPIO_WritePin>
	display7SEG(led_buffer[0]);
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <Init7SEG+0x48>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff fea9 	bl	800014c <display7SEG>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010c00 	.word	0x40010c00
 8000404:	2000003c 	.word	0x2000003c

08000408 <update_7seg_buffer>:

void update_7seg_buffer(int vertical, int horizontal){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	led_buffer[0] = (int)vertical/10;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a2b      	ldr	r2, [pc, #172]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000416:	fb82 1203 	smull	r1, r2, r2, r3
 800041a:	1092      	asrs	r2, r2, #2
 800041c:	17db      	asrs	r3, r3, #31
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	4a29      	ldr	r2, [pc, #164]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000422:	6013      	str	r3, [r2, #0]
	led_buffer[1] = vertical%10;
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000428:	fb83 2301 	smull	r2, r3, r3, r1
 800042c:	109a      	asrs	r2, r3, #2
 800042e:	17cb      	asrs	r3, r1, #31
 8000430:	1ad2      	subs	r2, r2, r3
 8000432:	4613      	mov	r3, r2
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	4413      	add	r3, r2
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	1aca      	subs	r2, r1, r3
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <update_7seg_buffer+0xc0>)
 800043e:	605a      	str	r2, [r3, #4]
	led_buffer[2] = (int)horizontal/10;
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1092      	asrs	r2, r2, #2
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000450:	6093      	str	r3, [r2, #8]
	led_buffer[3] = horizontal%10;
 8000452:	6839      	ldr	r1, [r7, #0]
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <update_7seg_buffer+0xbc>)
 8000456:	fb83 2301 	smull	r2, r3, r3, r1
 800045a:	109a      	asrs	r2, r3, #2
 800045c:	17cb      	asrs	r3, r1, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	1aca      	subs	r2, r1, r3
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <update_7seg_buffer+0xc0>)
 800046c:	60da      	str	r2, [r3, #12]
	if(led_buffer[3] <= 0){
 800046e:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	2b00      	cmp	r3, #0
 8000474:	dc07      	bgt.n	8000486 <update_7seg_buffer+0x7e>
		led_buffer[3] = 0;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
		led_buffer[2]--;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <update_7seg_buffer+0xc0>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000484:	6093      	str	r3, [r2, #8]
	}
	if(led_buffer[2] <= 0){
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	dc02      	bgt.n	8000494 <update_7seg_buffer+0x8c>
		led_buffer[2] = 0;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
	}
	if(led_buffer[1] <= 0){
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <update_7seg_buffer+0xc0>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	dc07      	bgt.n	80004ac <update_7seg_buffer+0xa4>
		led_buffer[0]--;
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <update_7seg_buffer+0xc0>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	3b01      	subs	r3, #1
 80004a2:	4a09      	ldr	r2, [pc, #36]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004a4:	6013      	str	r3, [r2, #0]
		led_buffer[1] = 0;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
	}
	if(led_buffer[0] <= 0){
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dc02      	bgt.n	80004ba <update_7seg_buffer+0xb2>
		led_buffer[0] = 0;
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <update_7seg_buffer+0xc0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
	}
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	66666667 	.word	0x66666667
 80004c8:	2000003c 	.word	0x2000003c

080004cc <fsm_for_input_processing>:
	MODE4
};

enum SystemState mode = MODE1;

void fsm_for_input_processing(void){
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	switch(mode){
 80004d2:	4b5c      	ldr	r3, [pc, #368]	; (8000644 <fsm_for_input_processing+0x178>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	f200 80a6 	bhi.w	8000628 <fsm_for_input_processing+0x15c>
 80004dc:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <fsm_for_input_processing+0x18>)
 80004de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e2:	bf00      	nop
 80004e4:	080004f5 	.word	0x080004f5
 80004e8:	0800050f 	.word	0x0800050f
 80004ec:	080005bd 	.word	0x080005bd
 80004f0:	080005f3 	.word	0x080005f3
	case MODE1:
	{
		// Normal mode
		TrafficLight();
 80004f4:	f000 fab0 	bl	8000a58 <TrafficLight>
		if(is_button_pressed(0) == 1){
 80004f8:	2000      	movs	r0, #0
 80004fa:	f000 f93f 	bl	800077c <is_button_pressed>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	f040 8093 	bne.w	800062c <fsm_for_input_processing+0x160>
			mode = MODE2;
 8000506:	4b4f      	ldr	r3, [pc, #316]	; (8000644 <fsm_for_input_processing+0x178>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
			//INCREASE VALUE OF PORT A BY ONE UNIT
		}
		break;
 800050c:	e08e      	b.n	800062c <fsm_for_input_processing+0x160>
	}
	case MODE2:{
		// Modify RED
		if(is_button_pressed(1) == 1){
 800050e:	2001      	movs	r0, #1
 8000510:	f000 f934 	bl	800077c <is_button_pressed>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	d119      	bne.n	800054e <fsm_for_input_processing+0x82>
			int temp = GetRedCycle()/1000;
 800051a:	f000 f97d 	bl	8000818 <GetRedCycle>
 800051e:	4603      	mov	r3, r0
 8000520:	4a49      	ldr	r2, [pc, #292]	; (8000648 <fsm_for_input_processing+0x17c>)
 8000522:	fb82 1203 	smull	r1, r2, r2, r3
 8000526:	1192      	asrs	r2, r2, #6
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	607b      	str	r3, [r7, #4]
			temp++;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
			if(temp >99) temp = 0;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b63      	cmp	r3, #99	; 0x63
 8000538:	dd01      	ble.n	800053e <fsm_for_input_processing+0x72>
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
			SetRedCycle(temp*1000);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000544:	fb02 f303 	mul.w	r3, r2, r3
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f93b 	bl	80007c4 <SetRedCycle>
		}

		update_7seg_buffer(GetRedCycle()/1000, 2);
 800054e:	f000 f963 	bl	8000818 <GetRedCycle>
 8000552:	4603      	mov	r3, r0
 8000554:	4a3c      	ldr	r2, [pc, #240]	; (8000648 <fsm_for_input_processing+0x17c>)
 8000556:	fb82 1203 	smull	r1, r2, r2, r3
 800055a:	1192      	asrs	r2, r2, #6
 800055c:	17db      	asrs	r3, r3, #31
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	2102      	movs	r1, #2
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff50 	bl	8000408 <update_7seg_buffer>
		Scan4LEDs();
 8000568:	f000 fa04 	bl	8000974 <Scan4LEDs>
		DisplayRedLight();
 800056c:	f000 f972 	bl	8000854 <DisplayRedLight>
		if(is_button_pressed(2) == 1){
 8000570:	2002      	movs	r0, #2
 8000572:	f000 f903 	bl	800077c <is_button_pressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d115      	bne.n	80005a8 <fsm_for_input_processing+0xdc>
			if(GetRedCycle() != ( GetYellowCycle() + GetGreenCycle() ) ){
 800057c:	f000 f94c 	bl	8000818 <GetRedCycle>
 8000580:	4604      	mov	r4, r0
 8000582:	f000 f953 	bl	800082c <GetYellowCycle>
 8000586:	4605      	mov	r5, r0
 8000588:	f000 f95a 	bl	8000840 <GetGreenCycle>
 800058c:	4603      	mov	r3, r0
 800058e:	442b      	add	r3, r5
 8000590:	429c      	cmp	r4, r3
 8000592:	d009      	beq.n	80005a8 <fsm_for_input_processing+0xdc>
				SetGreenCycle(GetRedCycle() - GetYellowCycle());
 8000594:	f000 f940 	bl	8000818 <GetRedCycle>
 8000598:	4604      	mov	r4, r0
 800059a:	f000 f947 	bl	800082c <GetYellowCycle>
 800059e:	4603      	mov	r3, r0
 80005a0:	1ae3      	subs	r3, r4, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f92a 	bl	80007fc <SetGreenCycle>
			}
		}

		if(is_button_pressed(0) == 1){
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 f8e7 	bl	800077c <is_button_pressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d13d      	bne.n	8000630 <fsm_for_input_processing+0x164>
			mode = MODE3;
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <fsm_for_input_processing+0x178>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005ba:	e039      	b.n	8000630 <fsm_for_input_processing+0x164>
	}
	case MODE3:{
		// Modify Yellow(Amber)
		update_7seg_buffer(GetYellowCycle()/1000, 3);
 80005bc:	f000 f936 	bl	800082c <GetYellowCycle>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a21      	ldr	r2, [pc, #132]	; (8000648 <fsm_for_input_processing+0x17c>)
 80005c4:	fb82 1203 	smull	r1, r2, r2, r3
 80005c8:	1192      	asrs	r2, r2, #6
 80005ca:	17db      	asrs	r3, r3, #31
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	2103      	movs	r1, #3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff19 	bl	8000408 <update_7seg_buffer>
		Scan4LEDs();
 80005d6:	f000 f9cd 	bl	8000974 <Scan4LEDs>
		DisplayYellowLight();
 80005da:	f000 f95f 	bl	800089c <DisplayYellowLight>
		if(is_button_pressed(0) == 1){
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f8cc 	bl	800077c <is_button_pressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d124      	bne.n	8000634 <fsm_for_input_processing+0x168>
			mode = MODE4;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <fsm_for_input_processing+0x178>)
 80005ec:	2203      	movs	r2, #3
 80005ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005f0:	e020      	b.n	8000634 <fsm_for_input_processing+0x168>
	}
	case MODE4:{
		// Modify Green
		update_7seg_buffer(GetGreenCycle()/1000, 4);
 80005f2:	f000 f925 	bl	8000840 <GetGreenCycle>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <fsm_for_input_processing+0x17c>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1192      	asrs	r2, r2, #6
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fefe 	bl	8000408 <update_7seg_buffer>
		Scan4LEDs();
 800060c:	f000 f9b2 	bl	8000974 <Scan4LEDs>
		DisplayGreenLight();
 8000610:	f000 f968 	bl	80008e4 <DisplayGreenLight>
		if(is_button_pressed(0) == 1){
 8000614:	2000      	movs	r0, #0
 8000616:	f000 f8b1 	bl	800077c <is_button_pressed>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10b      	bne.n	8000638 <fsm_for_input_processing+0x16c>
			mode = MODE1;
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <fsm_for_input_processing+0x178>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000626:	e007      	b.n	8000638 <fsm_for_input_processing+0x16c>
	}
	default:{
		break;
 8000628:	bf00      	nop
 800062a:	e006      	b.n	800063a <fsm_for_input_processing+0x16e>
		break;
 800062c:	bf00      	nop
 800062e:	e004      	b.n	800063a <fsm_for_input_processing+0x16e>
		break;
 8000630:	bf00      	nop
 8000632:	e002      	b.n	800063a <fsm_for_input_processing+0x16e>
		break;
 8000634:	bf00      	nop
 8000636:	e000      	b.n	800063a <fsm_for_input_processing+0x16e>
		break;
 8000638:	bf00      	nop
	}
	}
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bdb0      	pop	{r4, r5, r7, pc}
 8000642:	bf00      	nop
 8000644:	2000004c 	.word	0x2000004c
 8000648:	10624dd3 	.word	0x10624dd3

0800064c <button_reading>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
int hold_counter = 0;

void button_reading(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
//				flagForButtonPress1s[i] = 0;
//			}
//	}
	/* Sample code end here */

	for (int i=0; i< N0_OF_BUTTONS; i++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e076      	b.n	8000746 <button_reading+0xfa>
		// 3 button buffer for debouncing
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000658:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <button_reading+0x10c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4a3e      	ldr	r2, [pc, #248]	; (800075c <button_reading+0x110>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	460a      	mov	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 800066a:	4a3d      	ldr	r2, [pc, #244]	; (8000760 <button_reading+0x114>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	7819      	ldrb	r1, [r3, #0]
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <button_reading+0x10c>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON1_Pin);
 800067c:	2101      	movs	r1, #1
 800067e:	4839      	ldr	r0, [pc, #228]	; (8000764 <button_reading+0x118>)
 8000680:	f001 f8a6 	bl	80017d0 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	4619      	mov	r1, r3
 8000688:	4a35      	ldr	r2, [pc, #212]	; (8000760 <button_reading+0x114>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	460a      	mov	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]

		//If a button is pressed, start counting
		if( (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer0[i] == debounceButtonBuffer1[i]) ){
 8000692:	4a31      	ldr	r2, [pc, #196]	; (8000758 <button_reading+0x10c>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4413      	add	r3, r2
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	4931      	ldr	r1, [pc, #196]	; (8000760 <button_reading+0x114>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	440b      	add	r3, r1
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d14c      	bne.n	8000740 <button_reading+0xf4>
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <button_reading+0x110>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	492a      	ldr	r1, [pc, #168]	; (8000758 <button_reading+0x10c>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	440b      	add	r3, r1
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d142      	bne.n	8000740 <button_reading+0xf4>
			//Processing for pressing and releasing
			if(debounceButtonBuffer3[i] != debounceButtonBuffer2[i]){
 80006ba:	4a2b      	ldr	r2, [pc, #172]	; (8000768 <button_reading+0x11c>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4927      	ldr	r1, [pc, #156]	; (8000760 <button_reading+0x114>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	440b      	add	r3, r1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d019      	beq.n	8000702 <button_reading+0xb6>
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80006ce:	4a24      	ldr	r2, [pc, #144]	; (8000760 <button_reading+0x114>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	7819      	ldrb	r1, [r3, #0]
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <button_reading+0x11c>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]

				if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED){
 80006e0:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <button_reading+0x114>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d129      	bne.n	8000740 <button_reading+0xf4>
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 80006ec:	4a1f      	ldr	r2, [pc, #124]	; (800076c <button_reading+0x120>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
					counterForButtonPress1s[i] = 0;
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <button_reading+0x124>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2100      	movs	r1, #0
 80006fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000700:	e01e      	b.n	8000740 <button_reading+0xf4>
				}
			}
			//Processing for pressing and holding
			else{
				counterForButtonPress1s[i]++;
 8000702:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <button_reading+0x124>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070a:	3301      	adds	r3, #1
 800070c:	b299      	uxth	r1, r3
 800070e:	4a18      	ldr	r2, [pc, #96]	; (8000770 <button_reading+0x124>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] >= DURATION_FOR_AUTO_INCREASING){
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <button_reading+0x124>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800071e:	2b63      	cmp	r3, #99	; 0x63
 8000720:	d90e      	bls.n	8000740 <button_reading+0xf4>
					flagForButtonPress1s[i] = 1;
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <button_reading+0x128>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
					counterForButtonPress1s[i] =0;
 800072c:	4a10      	ldr	r2, [pc, #64]	; (8000770 <button_reading+0x124>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2100      	movs	r1, #0
 8000732:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					hold_counter++;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <button_reading+0x12c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <button_reading+0x12c>)
 800073e:	6013      	str	r3, [r2, #0]
	for (int i=0; i< N0_OF_BUTTONS; i++){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b02      	cmp	r3, #2
 800074a:	dd85      	ble.n	8000658 <button_reading+0xc>
				}
			}
		}
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004
 8000760:	2000000c 	.word	0x2000000c
 8000764:	40010c00 	.word	0x40010c00
 8000768:	20000010 	.word	0x20000010
 800076c:	20000000 	.word	0x20000000
 8000770:	20000054 	.word	0x20000054
 8000774:	20000050 	.word	0x20000050
 8000778:	2000005c 	.word	0x2000005c

0800077c <is_button_pressed>:

//Checking a button is pressed or not
int is_button_pressed(uint8_t index){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d901      	bls.n	8000790 <is_button_pressed+0x14>
 800078c:	2300      	movs	r3, #0
 800078e:	e011      	b.n	80007b4 <is_button_pressed+0x38>

	if(buttonBuffer[index] == BUTTON_IS_PRESSED){
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <is_button_pressed+0x44>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d105      	bne.n	80007a6 <is_button_pressed+0x2a>
		buttonBuffer[index] = BUTTON_IS_RELEASED;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <is_button_pressed+0x44>)
 800079e:	2101      	movs	r1, #1
 80007a0:	54d1      	strb	r1, [r2, r3]
		return 1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e006      	b.n	80007b4 <is_button_pressed+0x38>
	}else if(buttonBuffer[index] != BUTTON_IS_PRESSED){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <is_button_pressed+0x44>)
 80007aa:	5cd3      	ldrb	r3, [r2, r3]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <is_button_pressed+0x38>
		return 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e7ff      	b.n	80007b4 <is_button_pressed+0x38>
	}
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000

080007c4 <SetRedCycle>:
int green_cycle = 0;
enum TrafficLightState VERTICAL = RED;
enum TrafficLightState HORIZONTAL = GREEN;
int display_flag;

void SetRedCycle(int duration){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	red_cycle = duration;
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <SetRedCycle+0x18>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000060 	.word	0x20000060

080007e0 <SetYellowCycle>:
void SetYellowCycle(int duration){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	yellow_cycle = duration;
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <SetYellowCycle+0x18>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000064 	.word	0x20000064

080007fc <SetGreenCycle>:
void SetGreenCycle(int duration){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	green_cycle = duration;
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <SetGreenCycle+0x18>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000068 	.word	0x20000068

08000818 <GetRedCycle>:

int GetRedCycle(){
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	return red_cycle;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <GetRedCycle+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000060 	.word	0x20000060

0800082c <GetYellowCycle>:

int GetYellowCycle(){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	return yellow_cycle;
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <GetYellowCycle+0x10>)
 8000832:	681b      	ldr	r3, [r3, #0]
}
 8000834:	4618      	mov	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000064 	.word	0x20000064

08000840 <GetGreenCycle>:

int GetGreenCycle(){
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	return green_cycle;
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <GetGreenCycle+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	20000068 	.word	0x20000068

08000854 <DisplayRedLight>:


void DisplayRedLight(){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	// Turn on Red LEDs
	HAL_GPIO_WritePin(GPIOA, RED_HORIZONTAL_Pin|RED_VERTICAL_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2112      	movs	r1, #18
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <DisplayRedLight+0x40>)
 800085e:	f000 ffce 	bl	80017fe <HAL_GPIO_WritePin>
	// Turn off other LEDs
	HAL_GPIO_WritePin(GPIOA, YELLOW_HORIZONTAL_Pin|YELLOW_VERTICAL_Pin|
 8000862:	2201      	movs	r2, #1
 8000864:	216c      	movs	r1, #108	; 0x6c
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <DisplayRedLight+0x40>)
 8000868:	f000 ffc9 	bl	80017fe <HAL_GPIO_WritePin>
					GREEN_HORIZONTAL_Pin|GREEN_VERTICAL_Pin, GPIO_PIN_SET);
	// Blink
	if(timer2_flag == 1){
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <DisplayRedLight+0x44>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10c      	bne.n	800088e <DisplayRedLight+0x3a>
		setTimer2(1000, GetInterruptCycle());
 8000874:	f000 fb44 	bl	8000f00 <GetInterruptCycle>
 8000878:	4603      	mov	r3, r0
 800087a:	4619      	mov	r1, r3
 800087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000880:	f000 fb66 	bl	8000f50 <setTimer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HORI1_Pin|EN_HORI2_Pin|EN_VER1_Pin|EN_VER2_Pin);
 8000884:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <DisplayRedLight+0x40>)
 800088a:	f000 ffd0 	bl	800182e <HAL_GPIO_TogglePin>
	}
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010800 	.word	0x40010800
 8000898:	20000088 	.word	0x20000088

0800089c <DisplayYellowLight>:

void DisplayYellowLight(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	// Turn on Yellow LEDs
	HAL_GPIO_WritePin(GPIOA, YELLOW_HORIZONTAL_Pin|YELLOW_VERTICAL_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2124      	movs	r1, #36	; 0x24
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <DisplayYellowLight+0x40>)
 80008a6:	f000 ffaa 	bl	80017fe <HAL_GPIO_WritePin>
	// Turn off other LEDs
	HAL_GPIO_WritePin(GPIOA, RED_HORIZONTAL_Pin|RED_VERTICAL_Pin|
 80008aa:	2201      	movs	r2, #1
 80008ac:	215a      	movs	r1, #90	; 0x5a
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <DisplayYellowLight+0x40>)
 80008b0:	f000 ffa5 	bl	80017fe <HAL_GPIO_WritePin>
					GREEN_HORIZONTAL_Pin|GREEN_VERTICAL_Pin, GPIO_PIN_SET);
	// Blink
	if(timer2_flag == 1){
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <DisplayYellowLight+0x44>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d10c      	bne.n	80008d6 <DisplayYellowLight+0x3a>
		setTimer2(1000, GetInterruptCycle());
 80008bc:	f000 fb20 	bl	8000f00 <GetInterruptCycle>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4619      	mov	r1, r3
 80008c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c8:	f000 fb42 	bl	8000f50 <setTimer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HORI1_Pin|EN_HORI2_Pin|EN_VER1_Pin|EN_VER2_Pin);
 80008cc:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <DisplayYellowLight+0x40>)
 80008d2:	f000 ffac 	bl	800182e <HAL_GPIO_TogglePin>
	}
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010800 	.word	0x40010800
 80008e0:	20000088 	.word	0x20000088

080008e4 <DisplayGreenLight>:

void DisplayGreenLight(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	// Turn on Green LEDs
	HAL_GPIO_WritePin(GPIOA, GREEN_HORIZONTAL_Pin|GREEN_VERTICAL_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2148      	movs	r1, #72	; 0x48
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <DisplayGreenLight+0x40>)
 80008ee:	f000 ff86 	bl	80017fe <HAL_GPIO_WritePin>
	// Turn off other LEDs
	HAL_GPIO_WritePin(GPIOA, RED_HORIZONTAL_Pin|RED_VERTICAL_Pin|
 80008f2:	2201      	movs	r2, #1
 80008f4:	2136      	movs	r1, #54	; 0x36
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <DisplayGreenLight+0x40>)
 80008f8:	f000 ff81 	bl	80017fe <HAL_GPIO_WritePin>
					YELLOW_HORIZONTAL_Pin|YELLOW_VERTICAL_Pin, GPIO_PIN_SET);
	// Blink
	if(timer2_flag == 1){
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <DisplayGreenLight+0x44>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10c      	bne.n	800091e <DisplayGreenLight+0x3a>
		setTimer2(1000, GetInterruptCycle());
 8000904:	f000 fafc 	bl	8000f00 <GetInterruptCycle>
 8000908:	4603      	mov	r3, r0
 800090a:	4619      	mov	r1, r3
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 fb1e 	bl	8000f50 <setTimer2>
		HAL_GPIO_TogglePin(GPIOA, EN_HORI1_Pin|EN_HORI2_Pin|EN_VER1_Pin|EN_VER2_Pin);
 8000914:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DisplayGreenLight+0x40>)
 800091a:	f000 ff88 	bl	800182e <HAL_GPIO_TogglePin>
	}
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010800 	.word	0x40010800
 8000928:	20000088 	.word	0x20000088

0800092c <Scan2LEDs>:

void Scan2LEDs(uint16_t led1, uint16_t led2){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	80fb      	strh	r3, [r7, #6]
 8000938:	4613      	mov	r3, r2
 800093a:	80bb      	strh	r3, [r7, #4]
	if(timer2_flag == 1){
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <Scan2LEDs+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10e      	bne.n	8000962 <Scan2LEDs+0x36>
		setTimer2(100, GetInterruptCycle());
 8000944:	f000 fadc 	bl	8000f00 <GetInterruptCycle>
 8000948:	4603      	mov	r3, r0
 800094a:	4619      	mov	r1, r3
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f000 faff 	bl	8000f50 <setTimer2>
		HAL_GPIO_TogglePin(GPIOA, led1|led2);
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	4313      	orrs	r3, r2
 8000958:	b29b      	uxth	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <Scan2LEDs+0x44>)
 800095e:	f000 ff66 	bl	800182e <HAL_GPIO_TogglePin>
	}
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000088 	.word	0x20000088
 8000970:	40010800 	.word	0x40010800

08000974 <Scan4LEDs>:

void Scan4LEDs(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	if(timer4_flag == 1){
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <Scan4LEDs+0x24>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d109      	bne.n	8000994 <Scan4LEDs+0x20>
		setTimer4(100, GetInterruptCycle());
 8000980:	f000 fabe 	bl	8000f00 <GetInterruptCycle>
 8000984:	4603      	mov	r3, r0
 8000986:	4619      	mov	r1, r3
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 fb11 	bl	8000fb0 <setTimer4>
		update_display(&display_flag);
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <Scan4LEDs+0x28>)
 8000990:	f7ff fc6c 	bl	800026c <update_display>
	}
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000090 	.word	0x20000090
 800099c:	20000094 	.word	0x20000094

080009a0 <InitTrafficLight>:

// Set up initial state
void InitTrafficLight(){
 80009a0:	b598      	push	{r3, r4, r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	// initialize for traffic system LEDs
	HAL_GPIO_WritePin(GPIOA, RED_VERTICAL_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2102      	movs	r1, #2
 80009a8:	4825      	ldr	r0, [pc, #148]	; (8000a40 <InitTrafficLight+0xa0>)
 80009aa:	f000 ff28 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW_VERTICAL_Pin | GREEN_VERTICAL_Pin, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	210c      	movs	r1, #12
 80009b2:	4823      	ldr	r0, [pc, #140]	; (8000a40 <InitTrafficLight+0xa0>)
 80009b4:	f000 ff23 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN_HORIZONTAL_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	4820      	ldr	r0, [pc, #128]	; (8000a40 <InitTrafficLight+0xa0>)
 80009be:	f000 ff1e 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW_HORIZONTAL_Pin | GREEN_HORIZONTAL_Pin, SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2160      	movs	r1, #96	; 0x60
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <InitTrafficLight+0xa0>)
 80009c8:	f000 ff19 	bl	80017fe <HAL_GPIO_WritePin>

	// initialize for scan traffic led
	HAL_GPIO_WritePin(GPIOA, EN_VER1_Pin|EN_HORI1_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7120 	mov.w	r1, #640	; 0x280
 80009d2:	481b      	ldr	r0, [pc, #108]	; (8000a40 <InitTrafficLight+0xa0>)
 80009d4:	f000 ff13 	bl	80017fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_VER2_Pin|EN_HORI2_Pin, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <InitTrafficLight+0xa0>)
 80009e0:	f000 ff0d 	bl	80017fe <HAL_GPIO_WritePin>

	//
	VERTICAL = RED;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <InitTrafficLight+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	HORIZONTAL = GREEN;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <InitTrafficLight+0xa8>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	701a      	strb	r2, [r3, #0]

	setTimer1(red_cycle,GetInterruptCycle());
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <InitTrafficLight+0xac>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	f000 fa84 	bl	8000f00 <GetInterruptCycle>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4620      	mov	r0, r4
 80009fe:	f000 fa8f 	bl	8000f20 <setTimer1>
	setTimer3(green_cycle,GetInterruptCycle());
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <InitTrafficLight+0xb0>)
 8000a04:	681c      	ldr	r4, [r3, #0]
 8000a06:	f000 fa7b 	bl	8000f00 <GetInterruptCycle>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f000 fab6 	bl	8000f80 <setTimer3>

	// 100: time scan ( for both traffic light and 7segment LED)
	setTimer2(100,GetInterruptCycle());
 8000a14:	f000 fa74 	bl	8000f00 <GetInterruptCycle>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2064      	movs	r0, #100	; 0x64
 8000a1e:	f000 fa97 	bl	8000f50 <setTimer2>
	setTimer4(100,GetInterruptCycle());
 8000a22:	f000 fa6d 	bl	8000f00 <GetInterruptCycle>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f000 fac0 	bl	8000fb0 <setTimer4>

	// Turn on the 1st 7Segment LED, for scan LED
	Init7SEG();
 8000a30:	f7ff fcc4 	bl	80003bc <Init7SEG>
	display_flag = 0;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <InitTrafficLight+0xb4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]


}
 8000a3a:	bf00      	nop
 8000a3c:	bd98      	pop	{r3, r4, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010800 	.word	0x40010800
 8000a44:	2000006c 	.word	0x2000006c
 8000a48:	20000013 	.word	0x20000013
 8000a4c:	20000060 	.word	0x20000060
 8000a50:	20000068 	.word	0x20000068
 8000a54:	20000094 	.word	0x20000094

08000a58 <TrafficLight>:


void TrafficLight(){
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	int vertical = getTimer1()*GetInterruptCycle()/1000;
 8000a5e:	f000 fabf 	bl	8000fe0 <getTimer1>
 8000a62:	4604      	mov	r4, r0
 8000a64:	f000 fa4c 	bl	8000f00 <GetInterruptCycle>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	fb03 f304 	mul.w	r3, r3, r4
 8000a6e:	4a83      	ldr	r2, [pc, #524]	; (8000c7c <TrafficLight+0x224>)
 8000a70:	fb82 1203 	smull	r1, r2, r2, r3
 8000a74:	1192      	asrs	r2, r2, #6
 8000a76:	17db      	asrs	r3, r3, #31
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	607b      	str	r3, [r7, #4]
	int horizontal = getTimer3()*GetInterruptCycle()/1000;
 8000a7c:	f000 faba 	bl	8000ff4 <getTimer3>
 8000a80:	4604      	mov	r4, r0
 8000a82:	f000 fa3d 	bl	8000f00 <GetInterruptCycle>
 8000a86:	4603      	mov	r3, r0
 8000a88:	fb03 f304 	mul.w	r3, r3, r4
 8000a8c:	4a7b      	ldr	r2, [pc, #492]	; (8000c7c <TrafficLight+0x224>)
 8000a8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a92:	1192      	asrs	r2, r2, #6
 8000a94:	17db      	asrs	r3, r3, #31
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	603b      	str	r3, [r7, #0]

	update_7seg_buffer(vertical, horizontal);
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff fcb3 	bl	8000408 <update_7seg_buffer>
	Scan4LEDs();
 8000aa2:	f7ff ff67 	bl	8000974 <Scan4LEDs>

	switch(VERTICAL){
 8000aa6:	4b76      	ldr	r3, [pc, #472]	; (8000c80 <TrafficLight+0x228>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d026      	beq.n	8000afc <TrafficLight+0xa4>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	dc64      	bgt.n	8000b7c <TrafficLight+0x124>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <TrafficLight+0x64>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d040      	beq.n	8000b3c <TrafficLight+0xe4>
				setTimer1(red_cycle, GetInterruptCycle());
			}
			break;
		}
		default:{
			break;
 8000aba:	e05f      	b.n	8000b7c <TrafficLight+0x124>
			HAL_GPIO_WritePin(GPIOA, RED_VERTICAL_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4870      	ldr	r0, [pc, #448]	; (8000c84 <TrafficLight+0x22c>)
 8000ac2:	f000 fe9c 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_VER1_Pin, EN_VER2_Pin);
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	f7ff ff2e 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,YELLOW_VERTICAL_Pin | GREEN_VERTICAL_Pin , GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	210c      	movs	r1, #12
 8000ad4:	486b      	ldr	r0, [pc, #428]	; (8000c84 <TrafficLight+0x22c>)
 8000ad6:	f000 fe92 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000ada:	4b6b      	ldr	r3, [pc, #428]	; (8000c88 <TrafficLight+0x230>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d14e      	bne.n	8000b80 <TrafficLight+0x128>
				VERTICAL = GREEN;
 8000ae2:	4b67      	ldr	r3, [pc, #412]	; (8000c80 <TrafficLight+0x228>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	701a      	strb	r2, [r3, #0]
				setTimer1(green_cycle, GetInterruptCycle());
 8000ae8:	4b68      	ldr	r3, [pc, #416]	; (8000c8c <TrafficLight+0x234>)
 8000aea:	681c      	ldr	r4, [r3, #0]
 8000aec:	f000 fa08 	bl	8000f00 <GetInterruptCycle>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4619      	mov	r1, r3
 8000af4:	4620      	mov	r0, r4
 8000af6:	f000 fa13 	bl	8000f20 <setTimer1>
			break;
 8000afa:	e041      	b.n	8000b80 <TrafficLight+0x128>
			HAL_GPIO_WritePin(GPIOA, GREEN_VERTICAL_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2108      	movs	r1, #8
 8000b00:	4860      	ldr	r0, [pc, #384]	; (8000c84 <TrafficLight+0x22c>)
 8000b02:	f000 fe7c 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_VER1_Pin, EN_VER2_Pin);
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	2080      	movs	r0, #128	; 0x80
 8000b0c:	f7ff ff0e 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,RED_VERTICAL_Pin | YELLOW_VERTICAL_Pin , GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2106      	movs	r1, #6
 8000b14:	485b      	ldr	r0, [pc, #364]	; (8000c84 <TrafficLight+0x22c>)
 8000b16:	f000 fe72 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000b1a:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <TrafficLight+0x230>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d130      	bne.n	8000b84 <TrafficLight+0x12c>
				VERTICAL = YELLOW;
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <TrafficLight+0x228>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
				setTimer1(yellow_cycle, GetInterruptCycle());
 8000b28:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <TrafficLight+0x238>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	f000 f9e8 	bl	8000f00 <GetInterruptCycle>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4620      	mov	r0, r4
 8000b36:	f000 f9f3 	bl	8000f20 <setTimer1>
			break;
 8000b3a:	e023      	b.n	8000b84 <TrafficLight+0x12c>
			HAL_GPIO_WritePin(GPIOA, YELLOW_VERTICAL_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2104      	movs	r1, #4
 8000b40:	4850      	ldr	r0, [pc, #320]	; (8000c84 <TrafficLight+0x22c>)
 8000b42:	f000 fe5c 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_VER1_Pin, EN_VER2_Pin);
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	2080      	movs	r0, #128	; 0x80
 8000b4c:	f7ff feee 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,RED_VERTICAL_Pin | GREEN_VERTICAL_Pin , GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	210a      	movs	r1, #10
 8000b54:	484b      	ldr	r0, [pc, #300]	; (8000c84 <TrafficLight+0x22c>)
 8000b56:	f000 fe52 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer1_flag == 1){
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <TrafficLight+0x230>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d112      	bne.n	8000b88 <TrafficLight+0x130>
				VERTICAL = RED;
 8000b62:	4b47      	ldr	r3, [pc, #284]	; (8000c80 <TrafficLight+0x228>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
				setTimer1(red_cycle, GetInterruptCycle());
 8000b68:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <TrafficLight+0x23c>)
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	f000 f9c8 	bl	8000f00 <GetInterruptCycle>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4619      	mov	r1, r3
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 f9d3 	bl	8000f20 <setTimer1>
			break;
 8000b7a:	e005      	b.n	8000b88 <TrafficLight+0x130>
			break;
 8000b7c:	bf00      	nop
 8000b7e:	e004      	b.n	8000b8a <TrafficLight+0x132>
			break;
 8000b80:	bf00      	nop
 8000b82:	e002      	b.n	8000b8a <TrafficLight+0x132>
			break;
 8000b84:	bf00      	nop
 8000b86:	e000      	b.n	8000b8a <TrafficLight+0x132>
			break;
 8000b88:	bf00      	nop
		}
	}

	switch(HORIZONTAL){
 8000b8a:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <TrafficLight+0x240>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d027      	beq.n	8000be2 <TrafficLight+0x18a>
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	dc67      	bgt.n	8000c66 <TrafficLight+0x20e>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <TrafficLight+0x148>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d042      	beq.n	8000c24 <TrafficLight+0x1cc>
				setTimer3(red_cycle,GetInterruptCycle());
			}
			break;
		}
		default:{
			break;
 8000b9e:	e062      	b.n	8000c66 <TrafficLight+0x20e>
			HAL_GPIO_WritePin(GPIOA, RED_HORIZONTAL_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4837      	ldr	r0, [pc, #220]	; (8000c84 <TrafficLight+0x22c>)
 8000ba6:	f000 fe2a 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_HORI1_Pin, EN_HORI2_Pin);
 8000baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb2:	f7ff febb 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,YELLOW_HORIZONTAL_Pin|GREEN_HORIZONTAL_Pin , GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2160      	movs	r1, #96	; 0x60
 8000bba:	4832      	ldr	r0, [pc, #200]	; (8000c84 <TrafficLight+0x22c>)
 8000bbc:	f000 fe1f 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer3_flag == 1){
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <TrafficLight+0x244>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d150      	bne.n	8000c6a <TrafficLight+0x212>
				HORIZONTAL = GREEN;
 8000bc8:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <TrafficLight+0x240>)
 8000bca:	2202      	movs	r2, #2
 8000bcc:	701a      	strb	r2, [r3, #0]
				setTimer3(green_cycle,GetInterruptCycle());
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <TrafficLight+0x234>)
 8000bd0:	681c      	ldr	r4, [r3, #0]
 8000bd2:	f000 f995 	bl	8000f00 <GetInterruptCycle>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 f9d0 	bl	8000f80 <setTimer3>
			break;
 8000be0:	e043      	b.n	8000c6a <TrafficLight+0x212>
			HAL_GPIO_WritePin(GPIOA, GREEN_HORIZONTAL_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4827      	ldr	r0, [pc, #156]	; (8000c84 <TrafficLight+0x22c>)
 8000be8:	f000 fe09 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_HORI1_Pin, EN_HORI2_Pin);
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bf4:	f7ff fe9a 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,YELLOW_HORIZONTAL_Pin|RED_HORIZONTAL_Pin , GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2130      	movs	r1, #48	; 0x30
 8000bfc:	4821      	ldr	r0, [pc, #132]	; (8000c84 <TrafficLight+0x22c>)
 8000bfe:	f000 fdfe 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer3_flag == 1){
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <TrafficLight+0x244>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d131      	bne.n	8000c6e <TrafficLight+0x216>
				HORIZONTAL = YELLOW;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <TrafficLight+0x240>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
				setTimer3(yellow_cycle,GetInterruptCycle());
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <TrafficLight+0x238>)
 8000c12:	681c      	ldr	r4, [r3, #0]
 8000c14:	f000 f974 	bl	8000f00 <GetInterruptCycle>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f000 f9af 	bl	8000f80 <setTimer3>
			break;
 8000c22:	e024      	b.n	8000c6e <TrafficLight+0x216>
			HAL_GPIO_WritePin(GPIOA, YELLOW_HORIZONTAL_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2120      	movs	r1, #32
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <TrafficLight+0x22c>)
 8000c2a:	f000 fde8 	bl	80017fe <HAL_GPIO_WritePin>
			Scan2LEDs(EN_HORI1_Pin, EN_HORI2_Pin);
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f7ff fe79 	bl	800092c <Scan2LEDs>
			HAL_GPIO_WritePin(GPIOA,RED_HORIZONTAL_Pin|GREEN_HORIZONTAL_Pin , GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2150      	movs	r1, #80	; 0x50
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <TrafficLight+0x22c>)
 8000c40:	f000 fddd 	bl	80017fe <HAL_GPIO_WritePin>
			if(timer3_flag == 1){
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <TrafficLight+0x244>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d112      	bne.n	8000c72 <TrafficLight+0x21a>
				HORIZONTAL = RED;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <TrafficLight+0x240>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
				setTimer3(red_cycle,GetInterruptCycle());
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <TrafficLight+0x23c>)
 8000c54:	681c      	ldr	r4, [r3, #0]
 8000c56:	f000 f953 	bl	8000f00 <GetInterruptCycle>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f000 f98e 	bl	8000f80 <setTimer3>
			break;
 8000c64:	e005      	b.n	8000c72 <TrafficLight+0x21a>
			break;
 8000c66:	bf00      	nop
 8000c68:	e004      	b.n	8000c74 <TrafficLight+0x21c>
			break;
 8000c6a:	bf00      	nop
 8000c6c:	e002      	b.n	8000c74 <TrafficLight+0x21c>
			break;
 8000c6e:	bf00      	nop
 8000c70:	e000      	b.n	8000c74 <TrafficLight+0x21c>
			break;
 8000c72:	bf00      	nop
		}
	}

}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	10624dd3 	.word	0x10624dd3
 8000c80:	2000006c 	.word	0x2000006c
 8000c84:	40010800 	.word	0x40010800
 8000c88:	20000084 	.word	0x20000084
 8000c8c:	20000068 	.word	0x20000068
 8000c90:	20000064 	.word	0x20000064
 8000c94:	20000060 	.word	0x20000060
 8000c98:	20000013 	.word	0x20000013
 8000c9c:	2000008c 	.word	0x2000008c

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca4:	f000 faaa 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca8:	f000 f81a 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cac:	f000 f8b4 	bl	8000e18 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cb0:	f000 f852 	bl	8000d58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <main+0x3c>)
 8000cb6:	f001 f9ff 	bl	80020b8 <HAL_TIM_Base_Start_IT>
  SetRedCycle(INIT_RED);
 8000cba:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cbe:	f7ff fd81 	bl	80007c4 <SetRedCycle>
  SetYellowCycle(INIT_YELLOW);
 8000cc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cc6:	f7ff fd8b 	bl	80007e0 <SetYellowCycle>
  SetGreenCycle(INIT_GREEN);
 8000cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cce:	f7ff fd95 	bl	80007fc <SetGreenCycle>

  InitTrafficLight();
 8000cd2:	f7ff fe65 	bl	80009a0 <InitTrafficLight>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_for_input_processing();
 8000cd6:	f7ff fbf9 	bl	80004cc <fsm_for_input_processing>
 8000cda:	e7fc      	b.n	8000cd6 <main+0x36>
 8000cdc:	20000098 	.word	0x20000098

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fdac 	bl	800284c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fda2 	bl	8001860 <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d22:	f000 f8f7 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f80e 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 f8e3 	bl	8000f14 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3740      	adds	r7, #64	; 0x40
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d7e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d8c:	2209      	movs	r2, #9
 8000d8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d9c:	481b      	ldr	r0, [pc, #108]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000d9e:	f001 f93b 	bl	8002018 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da8:	f000 f8b4 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4619      	mov	r1, r3
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000dba:	f001 fad1 	bl	8002360 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dc4:	f000 f8a6 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000dd6:	f001 fc9d 	bl	8002714 <HAL_TIMEx_MasterConfigSynchronization>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de0:	f000 f898 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  interrupt_cycle = (int)(((1+htim2.Init.Prescaler)*(1+htim2.Init.Period))/8000);
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <MX_TIM2_Init+0xb4>)
 8000dec:	68d2      	ldr	r2, [r2, #12]
 8000dee:	3201      	adds	r2, #1
 8000df0:	fb02 f303 	mul.w	r3, r2, r3
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <MX_TIM2_Init+0xb8>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0a5b      	lsrs	r3, r3, #9
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <MX_TIM2_Init+0xbc>)
 8000e00:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000098 	.word	0x20000098
 8000e10:	10624dd3 	.word	0x10624dd3
 8000e14:	20000070 	.word	0x20000070

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_GPIO_Init+0xb8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_VERTICAL_Pin|YELLOW_VERTICAL_Pin|GREEN_VERTICAL_Pin|RED_HORIZONTAL_Pin
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <MX_GPIO_Init+0xbc>)
 8000e64:	f000 fccb 	bl	80017fe <HAL_GPIO_WritePin>
                          |YELLOW_HORIZONTAL_Pin|GREEN_HORIZONTAL_Pin|EN_VER1_Pin|EN_VER2_Pin
                          |EN_HORI1_Pin|EN_HORI2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_7SEG_VER1_Pin|EN_7SEG_VER2_Pin|EN_7SEG_HORI1_Pin|EN_7SEG_HORI2_Pin
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f647 31f8 	movw	r1, #31736	; 0x7bf8
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <MX_GPIO_Init+0xc0>)
 8000e70:	f000 fcc5 	bl	80017fe <HAL_GPIO_WritePin>
                          |seg_e_Pin|seg_f_Pin|seg_g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_VERTICAL_Pin YELLOW_VERTICAL_Pin GREEN_VERTICAL_Pin RED_HORIZONTAL_Pin
                           YELLOW_HORIZONTAL_Pin GREEN_HORIZONTAL_Pin EN_VER1_Pin EN_VER2_Pin
                           EN_HORI1_Pin EN_HORI2_Pin */
  GPIO_InitStruct.Pin = RED_VERTICAL_Pin|YELLOW_VERTICAL_Pin|GREEN_VERTICAL_Pin|RED_HORIZONTAL_Pin
 8000e74:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000e78:	60bb      	str	r3, [r7, #8]
                          |YELLOW_HORIZONTAL_Pin|GREEN_HORIZONTAL_Pin|EN_VER1_Pin|EN_VER2_Pin
                          |EN_HORI1_Pin|EN_HORI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <MX_GPIO_Init+0xbc>)
 8000e8e:	f000 fb25 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000e92:	2307      	movs	r3, #7
 8000e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0xc0>)
 8000ea6:	f000 fb19 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_7SEG_VER1_Pin EN_7SEG_VER2_Pin EN_7SEG_HORI1_Pin EN_7SEG_HORI2_Pin
                           seg_a_Pin seg_b_Pin seg_c_Pin seg_d_Pin
                           seg_e_Pin seg_f_Pin seg_g_Pin */
  GPIO_InitStruct.Pin = EN_7SEG_VER1_Pin|EN_7SEG_VER2_Pin|EN_7SEG_HORI1_Pin|EN_7SEG_HORI2_Pin
 8000eaa:	f647 33f8 	movw	r3, #31736	; 0x7bf8
 8000eae:	60bb      	str	r3, [r7, #8]
                          |seg_a_Pin|seg_b_Pin|seg_c_Pin|seg_d_Pin
                          |seg_e_Pin|seg_f_Pin|seg_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_GPIO_Init+0xc0>)
 8000ec4:	f000 fb0a 	bl	80014dc <HAL_GPIO_Init>

}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d103      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000eee:	f7ff fbad 	bl	800064c <button_reading>
		timerRun();
 8000ef2:	f000 f889 	bl	8001008 <timerRun>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <GetInterruptCycle>:

int GetInterruptCycle(){
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
	return interrupt_cycle;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <GetInterruptCycle+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000070 	.word	0x20000070

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <setTimer1>:
int timer1_flag =0;
int timer2_flag =0;
int timer3_flag =0;
int timer4_flag =0;

void setTimer1(int duration,int interrupt_cycle){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	timer1_counter = duration/interrupt_cycle;
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <setTimer1+0x28>)
 8000f34:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <setTimer1+0x2c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000074 	.word	0x20000074
 8000f4c:	20000084 	.word	0x20000084

08000f50 <setTimer2>:

void setTimer2(int duration,int interrupt_cycle){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	timer2_counter = duration/interrupt_cycle;
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <setTimer2+0x28>)
 8000f64:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <setTimer2+0x2c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000078 	.word	0x20000078
 8000f7c:	20000088 	.word	0x20000088

08000f80 <setTimer3>:

void setTimer3(int duration,int interrupt_cycle){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	timer3_counter = duration/interrupt_cycle;
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <setTimer3+0x28>)
 8000f94:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <setTimer3+0x2c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000007c 	.word	0x2000007c
 8000fac:	2000008c 	.word	0x2000008c

08000fb0 <setTimer4>:

void setTimer4(int duration,int interrupt_cycle){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	timer4_counter = duration/interrupt_cycle;
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <setTimer4+0x28>)
 8000fc4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <setTimer4+0x2c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000080 	.word	0x20000080
 8000fdc:	20000090 	.word	0x20000090

08000fe0 <getTimer1>:

int getTimer1(){
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
	return timer1_counter;
 8000fe4:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <getTimer1+0x10>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000074 	.word	0x20000074

08000ff4 <getTimer3>:

int getTimer3(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	return timer1_counter;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <getTimer3+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	20000074 	.word	0x20000074

08001008 <timerRun>:

void timerRun(){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	timer1_counter--;	// for led cycle (vertical)
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <timerRun+0x6c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4a18      	ldr	r2, [pc, #96]	; (8001074 <timerRun+0x6c>)
 8001014:	6013      	str	r3, [r2, #0]
	timer2_counter--;	// for scan LEDs
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <timerRun+0x70>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3b01      	subs	r3, #1
 800101c:	4a16      	ldr	r2, [pc, #88]	; (8001078 <timerRun+0x70>)
 800101e:	6013      	str	r3, [r2, #0]
	timer3_counter--;	// for led cycle (vertical)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <timerRun+0x74>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3b01      	subs	r3, #1
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <timerRun+0x74>)
 8001028:	6013      	str	r3, [r2, #0]
	timer4_counter--;	// for scan 7segment LEDs
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <timerRun+0x78>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3b01      	subs	r3, #1
 8001030:	4a13      	ldr	r2, [pc, #76]	; (8001080 <timerRun+0x78>)
 8001032:	6013      	str	r3, [r2, #0]

	if(timer1_counter <=0){
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <timerRun+0x6c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	dc02      	bgt.n	8001042 <timerRun+0x3a>
		timer1_flag =1;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <timerRun+0x7c>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter <=0){
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <timerRun+0x70>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dc02      	bgt.n	8001050 <timerRun+0x48>
		timer2_flag =1;
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <timerRun+0x80>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter <=0){
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <timerRun+0x74>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	dc02      	bgt.n	800105e <timerRun+0x56>
		timer3_flag =1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <timerRun+0x84>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter <=0){
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <timerRun+0x78>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	dc02      	bgt.n	800106c <timerRun+0x64>
		timer4_flag =1;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <timerRun+0x88>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
	}
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000074 	.word	0x20000074
 8001078:	20000078 	.word	0x20000078
 800107c:	2000007c 	.word	0x2000007c
 8001080:	20000080 	.word	0x20000080
 8001084:	20000084 	.word	0x20000084
 8001088:	20000088 	.word	0x20000088
 800108c:	2000008c 	.word	0x2000008c
 8001090:	20000090 	.word	0x20000090

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_MspInit+0x5c>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_MspInit+0x5c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_MspInit+0x5c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_MspInit+0x5c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_MspInit+0x60>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_MspInit+0x60>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001108:	d113      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_TIM_Base_MspInit+0x44>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_TIM_Base_MspInit+0x44>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_TIM_Base_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	201c      	movs	r0, #28
 8001128:	f000 f9a1 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800112c:	201c      	movs	r0, #28
 800112e:	f000 f9ba 	bl	80014a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001186:	f000 f87f 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <TIM2_IRQHandler+0x10>)
 8001196:	f000 ffdb 	bl	8002150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff fff8 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b6:	490c      	ldr	r1, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b8:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011cc:	4c09      	ldr	r4, [pc, #36]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f001 fb05 	bl	80027e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff fd5f 	bl	8000ca0 <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80011ec:	080029b8 	.word	0x080029b8
  ldr r2, =_sbss
 80011f0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80011f4:	200000e4 	.word	0x200000e4

080011f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f923 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	200f      	movs	r0, #15
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff ff3c 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f93b 	bl	80014c2 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f903 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000014 	.word	0x20000014
 8001280:	2000001c 	.word	0x2000001c
 8001284:	20000018 	.word	0x20000018

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	2000001c 	.word	0x2000001c
 80012a8:	200000e0 	.word	0x200000e0

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200000e0 	.word	0x200000e0

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4906      	ldr	r1, [pc, #24]	; (8001358 <__NVIC_EnableIRQ+0x34>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff2d 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff42 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff35 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e148      	b.n	8001782 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f0:	2201      	movs	r2, #1
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8137 	bne.w	800177c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4aa3      	ldr	r2, [pc, #652]	; (80017a0 <HAL_GPIO_Init+0x2c4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d05e      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001518:	4aa1      	ldr	r2, [pc, #644]	; (80017a0 <HAL_GPIO_Init+0x2c4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d875      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800151e:	4aa1      	ldr	r2, [pc, #644]	; (80017a4 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d058      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001524:	4a9f      	ldr	r2, [pc, #636]	; (80017a4 <HAL_GPIO_Init+0x2c8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d86f      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800152a:	4a9f      	ldr	r2, [pc, #636]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d052      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001530:	4a9d      	ldr	r2, [pc, #628]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d869      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001536:	4a9d      	ldr	r2, [pc, #628]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d04c      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 800153c:	4a9b      	ldr	r2, [pc, #620]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d863      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001542:	4a9b      	ldr	r2, [pc, #620]	; (80017b0 <HAL_GPIO_Init+0x2d4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d046      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001548:	4a99      	ldr	r2, [pc, #612]	; (80017b0 <HAL_GPIO_Init+0x2d4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d85d      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d82a      	bhi.n	80015a8 <HAL_GPIO_Init+0xcc>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d859      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <HAL_GPIO_Init+0x80>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015b1 	.word	0x080015b1
 8001564:	080015c3 	.word	0x080015c3
 8001568:	08001605 	.word	0x08001605
 800156c:	0800160b 	.word	0x0800160b
 8001570:	0800160b 	.word	0x0800160b
 8001574:	0800160b 	.word	0x0800160b
 8001578:	0800160b 	.word	0x0800160b
 800157c:	0800160b 	.word	0x0800160b
 8001580:	0800160b 	.word	0x0800160b
 8001584:	0800160b 	.word	0x0800160b
 8001588:	0800160b 	.word	0x0800160b
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800160b 	.word	0x0800160b
 8001594:	0800160b 	.word	0x0800160b
 8001598:	0800160b 	.word	0x0800160b
 800159c:	0800160b 	.word	0x0800160b
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	4a82      	ldr	r2, [pc, #520]	; (80017b4 <HAL_GPIO_Init+0x2d8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ae:	e02c      	b.n	800160a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e029      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	3304      	adds	r3, #4
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e024      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	3308      	adds	r3, #8
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e01f      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	330c      	adds	r3, #12
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e01a      	b.n	800160c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015de:	2304      	movs	r3, #4
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e013      	b.n	800160c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	611a      	str	r2, [r3, #16]
          break;
 80015f6:	e009      	b.n	800160c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	615a      	str	r2, [r3, #20]
          break;
 8001602:	e003      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x130>
          break;
 800160a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d801      	bhi.n	8001616 <HAL_GPIO_Init+0x13a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	e001      	b.n	800161a <HAL_GPIO_Init+0x13e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3304      	adds	r3, #4
 800161a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d802      	bhi.n	8001628 <HAL_GPIO_Init+0x14c>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x152>
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	3b08      	subs	r3, #8
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	210f      	movs	r1, #15
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	6a39      	ldr	r1, [r7, #32]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8090 	beq.w	800177c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800165c:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <HAL_GPIO_Init+0x2e4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d00d      	beq.n	80016bc <HAL_GPIO_Init+0x1e0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a48      	ldr	r2, [pc, #288]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d007      	beq.n	80016b8 <HAL_GPIO_Init+0x1dc>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_GPIO_Init+0x1d8>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1e2>
 80016bc:	2300      	movs	r3, #0
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ce:	493b      	ldr	r1, [pc, #236]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	4937      	ldr	r1, [pc, #220]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4933      	ldr	r1, [pc, #204]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001700:	4013      	ands	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	492d      	ldr	r1, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4929      	ldr	r1, [pc, #164]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001728:	4013      	ands	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4923      	ldr	r1, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	491f      	ldr	r1, [pc, #124]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4919      	ldr	r1, [pc, #100]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4915      	ldr	r1, [pc, #84]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001778:	4013      	ands	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3301      	adds	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	fa22 f303 	lsr.w	r3, r2, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	f47f aeaf 	bne.w	80014f0 <HAL_GPIO_Init+0x14>
  }
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	372c      	adds	r7, #44	; 0x2c
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	10320000 	.word	0x10320000
 80017a4:	10310000 	.word	0x10310000
 80017a8:	10220000 	.word	0x10220000
 80017ac:	10210000 	.word	0x10210000
 80017b0:	10120000 	.word	0x10120000
 80017b4:	10110000 	.word	0x10110000
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	807b      	strh	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180e:	787b      	ldrb	r3, [r7, #1]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001814:	887a      	ldrh	r2, [r7, #2]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181a:	e003      	b.n	8001824 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	041a      	lsls	r2, r3, #16
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	041a      	lsls	r2, r3, #16
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43d9      	mvns	r1, r3
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	400b      	ands	r3, r1
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e26c      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8087 	beq.w	800198e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	d00c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d112      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d10b      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <HAL_RCC_OscConfig+0x12c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d168      	bne.n	800198c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e246      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x76>
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e02e      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b78      	ldr	r3, [pc, #480]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a77      	ldr	r2, [pc, #476]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0xbc>
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a71      	ldr	r2, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fcb6 	bl	80012ac <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fcb2 	bl	80012ac <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1fa      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xe4>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fca2 	bl	80012ac <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fc9e 	bl	80012ac <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1e6      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x10c>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1ba      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fc57 	bl	80012ac <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fc53 	bl	80012ac <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e19b      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4927      	ldr	r1, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc36 	bl	80012ac <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fc32 	bl	80012ac <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e17a      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03a      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fc16 	bl	80012ac <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fc12 	bl	80012ac <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e15a      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 fa9a 	bl	8001fdc <RCC_Delay>
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fbfc 	bl	80012ac <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbf8 	bl	80012ac <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e140      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	42420000 	.word	0x42420000
 8001ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e9      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a6 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b97      	ldr	r3, [pc, #604]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b94      	ldr	r3, [pc, #592]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a93      	ldr	r2, [pc, #588]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b91      	ldr	r3, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b8b      	ldr	r3, [pc, #556]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a8a      	ldr	r2, [pc, #552]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fbb9 	bl	80012ac <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff fbb5 	bl	80012ac <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0fd      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b81      	ldr	r3, [pc, #516]	; (8001d58 <HAL_RCC_OscConfig+0x4f8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x312>
 8001b64:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001b9c:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a69      	ldr	r2, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a66      	ldr	r2, [pc, #408]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a63      	ldr	r2, [pc, #396]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb69 	bl	80012ac <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fb65 	bl	80012ac <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0ab      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b57      	ldr	r3, [pc, #348]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x37e>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb53 	bl	80012ac <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb4f 	bl	80012ac <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e095      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a47      	ldr	r2, [pc, #284]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8081 	beq.w	8001d4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d061      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d146      	bne.n	8001cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fb23 	bl	80012ac <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fb1f 	bl	80012ac <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e067      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	492d      	ldr	r1, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a19      	ldr	r1, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff faf3 	bl	80012ac <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff faef 	bl	80012ac <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e037      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x46a>
 8001ce8:	e02f      	b.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_RCC_OscConfig+0x4fc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fadc 	bl	80012ac <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fad8 	bl	80012ac <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e020      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x498>
 8001d16:	e018      	b.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e013      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	42420060 	.word	0x42420060

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0d0      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0207 	bic.w	r2, r3, #7
 8001d8a:	4965      	ldr	r1, [pc, #404]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b63      	ldr	r3, [pc, #396]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0b8      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a58      	ldr	r2, [pc, #352]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	494d      	ldr	r1, [pc, #308]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d040      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d115      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e07f      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e073      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06b      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4936      	ldr	r1, [pc, #216]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff fa2c 	bl	80012ac <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff fa28 	bl	80012ac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e053      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d210      	bcs.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4922      	ldr	r1, [pc, #136]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4916      	ldr	r1, [pc, #88]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eee:	f000 f821 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	490a      	ldr	r1, [pc, #40]	; (8001f28 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	5ccb      	ldrb	r3, [r1, r3]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1cc>)
 8001f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1d0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f98a 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	0800298c 	.word	0x0800298c
 8001f2c:	20000014 	.word	0x20000014
 8001f30:	20000018 	.word	0x20000018

08001f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d002      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0x36>
 8001f62:	e027      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f66:	613b      	str	r3, [r7, #16]
      break;
 8001f68:	e027      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d010      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	0c5b      	lsrs	r3, r3, #17
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	fb02 f203 	mul.w	r2, r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e004      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	613b      	str	r3, [r7, #16]
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	693b      	ldr	r3, [r7, #16]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	007a1200 	.word	0x007a1200
 8001fd0:	0800299c 	.word	0x0800299c
 8001fd4:	080029ac 	.word	0x080029ac
 8001fd8:	003d0900 	.word	0x003d0900

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000014 	.word	0x20000014
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e041      	b.n	80020ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff f85a 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 fa6e 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e035      	b.n	800213c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_TIM_Base_Start_IT+0x90>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_TIM_Base_Start_IT+0x4e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fa:	d004      	beq.n	8002106 <HAL_TIM_Base_Start_IT+0x4e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_TIM_Base_Start_IT+0x94>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d111      	bne.n	800212a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b06      	cmp	r3, #6
 8002116:	d010      	beq.n	800213a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002128:	e007      	b.n	800213a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40012c00 	.word	0x40012c00
 800214c:	40000400 	.word	0x40000400

08002150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b02      	cmp	r3, #2
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0202 	mvn.w	r2, #2
 800217c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f9b4 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f9a7 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f9b6 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0204 	mvn.w	r2, #4
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f98a 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f97d 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f98c 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b08      	cmp	r3, #8
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0208 	mvn.w	r2, #8
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2204      	movs	r2, #4
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f960 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f953 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f962 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b10      	cmp	r3, #16
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b10      	cmp	r3, #16
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0210 	mvn.w	r2, #16
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2208      	movs	r2, #8
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f936 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f929 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f938 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0201 	mvn.w	r2, #1
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fe04 	bl	8000edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b80      	cmp	r3, #128	; 0x80
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa6b 	bl	80027d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8fc 	bl	8002524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b20      	cmp	r3, #32
 8002338:	d10e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b20      	cmp	r3, #32
 8002346:	d107      	bne.n	8002358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0220 	mvn.w	r2, #32
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa36 	bl	80027c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIM_ConfigClockSource+0x1c>
 8002378:	2302      	movs	r3, #2
 800237a:	e0b4      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x186>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b4:	d03e      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0xd4>
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ba:	f200 8087 	bhi.w	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c2:	f000 8086 	beq.w	80024d2 <HAL_TIM_ConfigClockSource+0x172>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ca:	d87f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b70      	cmp	r3, #112	; 0x70
 80023ce:	d01a      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0xa6>
 80023d0:	2b70      	cmp	r3, #112	; 0x70
 80023d2:	d87b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b60      	cmp	r3, #96	; 0x60
 80023d6:	d050      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x11a>
 80023d8:	2b60      	cmp	r3, #96	; 0x60
 80023da:	d877      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b50      	cmp	r3, #80	; 0x50
 80023de:	d03c      	beq.n	800245a <HAL_TIM_ConfigClockSource+0xfa>
 80023e0:	2b50      	cmp	r3, #80	; 0x50
 80023e2:	d873      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d058      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x13a>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d86f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b30      	cmp	r3, #48	; 0x30
 80023ee:	d064      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b30      	cmp	r3, #48	; 0x30
 80023f2:	d86b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d060      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d867      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	2b10      	cmp	r3, #16
 8002402:	d05a      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	e062      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f000 f95e 	bl	80026d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
      break;
 8002432:	e04f      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f000 f947 	bl	80026d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002456:	609a      	str	r2, [r3, #8]
      break;
 8002458:	e03c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f8be 	bl	80025e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2150      	movs	r1, #80	; 0x50
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f915 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 8002478:	e02c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	461a      	mov	r2, r3
 8002488:	f000 f8dc 	bl	8002644 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2160      	movs	r1, #96	; 0x60
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f905 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 8002498:	e01c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 f89e 	bl	80025e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f8f5 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 80024b8:	e00c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f000 f8ec 	bl	80026a2 <TIM_ITRx_SetConfig>
      break;
 80024ca:	e003      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e000      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <TIM_Base_SetConfig+0xac>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <TIM_Base_SetConfig+0xac>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d108      	bne.n	800259c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <TIM_Base_SetConfig+0xa8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d103      	bne.n	80025d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40000400 	.word	0x40000400

080025e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f023 030a 	bic.w	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	f023 0210 	bic.w	r2, r3, #16
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800266e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	031b      	lsls	r3, r3, #12
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002680:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	621a      	str	r2, [r3, #32]
}
 8002698:	bf00      	nop
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f043 0307 	orr.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	021a      	lsls	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	609a      	str	r2, [r3, #8]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002728:	2302      	movs	r3, #2
 800272a:	e041      	b.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d004      	beq.n	8002784 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d10c      	bne.n	800279e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	4313      	orrs	r3, r2
 8002794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400

080027c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <__libc_init_array>:
 80027e8:	b570      	push	{r4, r5, r6, lr}
 80027ea:	2600      	movs	r6, #0
 80027ec:	4d0c      	ldr	r5, [pc, #48]	; (8002820 <__libc_init_array+0x38>)
 80027ee:	4c0d      	ldr	r4, [pc, #52]	; (8002824 <__libc_init_array+0x3c>)
 80027f0:	1b64      	subs	r4, r4, r5
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	42a6      	cmp	r6, r4
 80027f6:	d109      	bne.n	800280c <__libc_init_array+0x24>
 80027f8:	f000 f830 	bl	800285c <_init>
 80027fc:	2600      	movs	r6, #0
 80027fe:	4d0a      	ldr	r5, [pc, #40]	; (8002828 <__libc_init_array+0x40>)
 8002800:	4c0a      	ldr	r4, [pc, #40]	; (800282c <__libc_init_array+0x44>)
 8002802:	1b64      	subs	r4, r4, r5
 8002804:	10a4      	asrs	r4, r4, #2
 8002806:	42a6      	cmp	r6, r4
 8002808:	d105      	bne.n	8002816 <__libc_init_array+0x2e>
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002810:	4798      	blx	r3
 8002812:	3601      	adds	r6, #1
 8002814:	e7ee      	b.n	80027f4 <__libc_init_array+0xc>
 8002816:	f855 3b04 	ldr.w	r3, [r5], #4
 800281a:	4798      	blx	r3
 800281c:	3601      	adds	r6, #1
 800281e:	e7f2      	b.n	8002806 <__libc_init_array+0x1e>
 8002820:	080029b0 	.word	0x080029b0
 8002824:	080029b0 	.word	0x080029b0
 8002828:	080029b0 	.word	0x080029b0
 800282c:	080029b4 	.word	0x080029b4

08002830 <memcpy>:
 8002830:	440a      	add	r2, r1
 8002832:	4291      	cmp	r1, r2
 8002834:	f100 33ff 	add.w	r3, r0, #4294967295
 8002838:	d100      	bne.n	800283c <memcpy+0xc>
 800283a:	4770      	bx	lr
 800283c:	b510      	push	{r4, lr}
 800283e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002842:	4291      	cmp	r1, r2
 8002844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002848:	d1f9      	bne.n	800283e <memcpy+0xe>
 800284a:	bd10      	pop	{r4, pc}

0800284c <memset>:
 800284c:	4603      	mov	r3, r0
 800284e:	4402      	add	r2, r0
 8002850:	4293      	cmp	r3, r2
 8002852:	d100      	bne.n	8002856 <memset+0xa>
 8002854:	4770      	bx	lr
 8002856:	f803 1b01 	strb.w	r1, [r3], #1
 800285a:	e7f9      	b.n	8002850 <memset+0x4>

0800285c <_init>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	bf00      	nop
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr

08002868 <_fini>:
 8002868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286a:	bf00      	nop
 800286c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286e:	bc08      	pop	{r3}
 8002870:	469e      	mov	lr, r3
 8002872:	4770      	bx	lr
